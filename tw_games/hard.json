{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_10", "type": "c"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_11", "type": "c"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_12", "type": "c"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_13", "type": "c"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_8", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_9", "type": "c"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_10", "type": "k"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_13", "type": "k"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_7", "type": "k"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_1", "type": "o"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_6", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_8", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "d_4", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_5", "type": "d"}]}, {"name": "east_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_12", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_3", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_3", "type": "k"}, {"name": "c_4", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_4", "type": "k"}, {"name": "c_5", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_5", "type": "k"}, {"name": "c_6", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_6", "type": "k"}, {"name": "c_7", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_6", "type": "c"}]}, {"name": "link", "arguments": [{"name": "r_0", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_1", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_0", "type": "r"}, {"name": "d_6", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_1", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_1", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_0", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_3", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_1", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_3", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_6", "type": "d"}, {"name": "r_0", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_7", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_7", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_8", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_7", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_8", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_7", "type": "r"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_10", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_12", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_13", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_9", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "locked", "arguments": [{"name": "d_2", "type": "d"}]}, {"name": "locked", "arguments": [{"name": "d_3", "type": "d"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_10", "type": "k"}, {"name": "c_9", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_12", "type": "k"}, {"name": "c_10", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_13", "type": "k"}, {"name": "c_12", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_3", "type": "k"}, {"name": "c_3", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_4", "type": "k"}, {"name": "c_4", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_5", "type": "k"}, {"name": "c_5", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_6", "type": "k"}, {"name": "c_6", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_7", "type": "k"}, {"name": "c_7", "type": "c"}]}, {"name": "north_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_11", "type": "c"}]}, {"name": "open", "arguments": [{"name": "d_1", "type": "d"}]}, {"name": "open", "arguments": [{"name": "d_6", "type": "d"}]}, {"name": "south_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": [], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "Hey, thanks for coming over to the TextWorld today, there is something I need you to do for me. First off, retrieve the American latchkey from the floor of the attic. After that, assure that the American locker is unlocked. After that, make absolutely sure that the American locker is wide open. Then, pick up the type Y key from the American locker in the attic. With the type Y key, travel west. Then, unlock the type Y chest. Once you have unlocked the type Y chest, ensure that the type Y chest in the scullery is open. Then, retrieve the American limited edition key from the type Y chest. And then, unlock the American limited edition locker inside the scullery with the American limited edition key. After that, make it so that the American limited edition locker is ajar. And then, take the fudge scented passkey from the American limited edition locker within the scullery. If you can get your hands on the fudge scented passkey, go to the east. With that over with, unlock the fudge scented safe in the attic. And then, open the fudge scented safe. Then, retrieve the American style latchkey from the fudge scented safe within the attic. Then, look and see that the American style box within the attic is unlocked with the American style latchkey. After that, open the American style box inside the attic. After that, retrieve the keycard from the American style box. And then, move west. Then, unlock the locker. And then, open the locker. Then, retrieve the American limited edition keycard from the locker. After that, make an attempt to travel east. With that accomplished, make sure that the American limited edition chest inside the attic is unlocked. After that, open the American limited edition chest inside the attic. And then, take the latchkey from the American limited edition chest. Then, unlock the safe in the attic with the latchkey. After that, ensure that the safe within the attic is open. After that, retrieve the loaf of bread from the safe. And then, eat the loaf of bread. Got that? Good!", "reward": 1, "commands": ["take American latchkey", "unlock American locker with American latchkey", "open American locker", "take type Y key from American locker", "go west", "unlock type Y chest with type Y key", "open type Y chest", "take American limited edition key from type Y chest", "unlock American limited edition locker with American limited edition key", "open American limited edition locker", "take fudge scented passkey from American limited edition locker", "go east", "unlock fudge scented safe with fudge scented passkey", "open fudge scented safe", "take American style latchkey from fudge scented safe", "unlock American style box with American style latchkey", "open American style box", "take keycard from American style box", "go west", "unlock locker with keycard", "open locker", "take American limited edition keycard from locker", "go east", "unlock American limited edition chest with American limited edition keycard", "open American limited edition chest", "take latchkey from American limited edition chest", "unlock safe with latchkey", "open safe", "take loaf of bread from safe", "eat loaf of bread"], "win_events": [{"commands": ["take American latchkey", "unlock American locker with American latchkey", "open American locker", "take type Y key from American locker", "go west", "unlock type Y chest with type Y key", "open type Y chest", "take American limited edition key from type Y chest", "unlock American limited edition locker with American limited edition key", "open American limited edition locker", "take fudge scented passkey from American limited edition locker", "go east", "unlock fudge scented safe with fudge scented passkey", "open fudge scented safe", "take American style latchkey from fudge scented safe", "unlock American style box with American style latchkey", "open American style box", "take keycard from American style box", "go west", "unlock locker with keycard", "open locker", "take American limited edition keycard from locker", "go east", "unlock American limited edition chest with American limited edition keycard", "open American limited edition chest", "take latchkey from American limited edition chest", "unlock safe with latchkey", "open safe", "take loaf of bread from safe", "eat loaf of bread"], "actions": [{"name": "take", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_7", "type": "k"}, {"name": "r_4", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_7", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_7}", "reverse_name": null, "reverse_command_template": "drop {k_7}"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_7", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_7", "type": "k"}, {"name": "c_7", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_7", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_7", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_7", "type": "k"}, {"name": "c_7", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_7", "type": "c"}]}], "command_template": "unlock {c_7} with {k_7}", "reverse_name": null, "reverse_command_template": "lock {c_7} with {k_7}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_7", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_7", "type": "c"}]}], "command_template": "open {c_7}", "reverse_name": null, "reverse_command_template": "close {c_7}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_6", "type": "k"}, {"name": "c_7", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_6", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_6} from {c_7}", "reverse_name": null, "reverse_command_template": "insert {k_6} into {c_7}"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_6", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_6", "type": "k"}, {"name": "c_6", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_6", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_6", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_6", "type": "k"}, {"name": "c_6", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_6", "type": "c"}]}], "command_template": "unlock {c_6} with {k_6}", "reverse_name": null, "reverse_command_template": "lock {c_6} with {k_6}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_6", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_6", "type": "c"}]}], "command_template": "open {c_6}", "reverse_name": null, "reverse_command_template": "close {c_6}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_5", "type": "k"}, {"name": "c_6", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_5", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_5} from {c_6}", "reverse_name": null, "reverse_command_template": "insert {k_5} into {c_6}"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_5", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_5", "type": "k"}, {"name": "c_5", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_5", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_5", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_5", "type": "k"}, {"name": "c_5", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_5", "type": "c"}]}], "command_template": "unlock {c_5} with {k_5}", "reverse_name": null, "reverse_command_template": "lock {c_5} with {k_5}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_5", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_5", "type": "c"}]}], "command_template": "open {c_5}", "reverse_name": null, "reverse_command_template": "close {c_5}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_4", "type": "k"}, {"name": "c_5", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_4", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_4} from {c_5}", "reverse_name": null, "reverse_command_template": "insert {k_4} into {c_5}"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_4", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_4", "type": "k"}, {"name": "c_4", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_4", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_4", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_4", "type": "k"}, {"name": "c_4", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_4", "type": "c"}]}], "command_template": "unlock {c_4} with {k_4}", "reverse_name": null, "reverse_command_template": "lock {c_4} with {k_4}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_4", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_4", "type": "c"}]}], "command_template": "open {c_4}", "reverse_name": null, "reverse_command_template": "close {c_4}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_3", "type": "k"}, {"name": "c_4", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_3", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_3} from {c_4}", "reverse_name": null, "reverse_command_template": "insert {k_3} into {c_4}"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_3", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_3", "type": "k"}, {"name": "c_3", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_3", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_3", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_3", "type": "k"}, {"name": "c_3", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_3", "type": "c"}]}], "command_template": "unlock {c_3} with {k_3}", "reverse_name": null, "reverse_command_template": "lock {c_3} with {k_3}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_3", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_3", "type": "c"}]}], "command_template": "open {c_3}", "reverse_name": null, "reverse_command_template": "close {c_3}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_3", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_2", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_2} from {c_3}", "reverse_name": null, "reverse_command_template": "insert {k_2} into {c_3}"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_2", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_2", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_2", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_2", "type": "c"}]}], "command_template": "unlock {c_2} with {k_2}", "reverse_name": null, "reverse_command_template": "lock {c_2} with {k_2}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_2", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_2", "type": "c"}]}], "command_template": "open {c_2}", "reverse_name": null, "reverse_command_template": "close {c_2}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_2", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_1} from {c_2}", "reverse_name": null, "reverse_command_template": "insert {k_1} into {c_2}"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_1", "type": "c"}]}], "command_template": "unlock {c_1} with {k_1}", "reverse_name": null, "reverse_command_template": "lock {c_1} with {k_1}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}], "command_template": "open {c_1}", "reverse_name": null, "reverse_command_template": "close {c_1}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_0} from {c_1}", "reverse_name": null, "reverse_command_template": "insert {k_0} into {c_1}"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "unlock {c_0} with {k_0}", "reverse_name": null, "reverse_command_template": "lock {c_0} with {k_0}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "open {c_0}", "reverse_name": null, "reverse_command_template": "close {c_0}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}], "command_template": "take {f_0} from {c_0}", "reverse_name": null, "reverse_command_template": "insert {f_0} into {c_0}"}, {"name": "eat", "preconditions": [{"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "eaten", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": "eat {f_0}", "reverse_name": null, "reverse_command_template": null}], "condition": {"name": "trigger", "preconditions": [{"name": "eaten", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "eaten", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "attic", "noun": "attic", "adj": null, "desc": "You arrive in an attic. A typical kind of place.\n\n You can make out [if c_0 is locked]a locked[else if c_0 is open]an opened[otherwise]a closed[end if] safe.[if c_0 is open and there is something in the c_0] The safe contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] The safe is empty, what a horrible day![end if] You can make out [if c_1 is locked]a locked[else if c_1 is open]an opened[otherwise]a closed[end if] American limited edition chest.[if c_1 is open and there is something in the c_1] The American limited edition chest contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] The American limited edition chest is empty! This is the worst thing that could possibly happen, ever![end if] As if things weren't amazing enough already, you can even see a American style box.[if c_3 is open and there is something in the c_3] The American style box contains [a list of things in the c_3], so there's that.[end if][if c_3 is open and the c_3 contains nothing] The American style box is empty, what a horrible day![end if] You can make out [if c_4 is locked]a locked[else if c_4 is open]an opened[otherwise]a closed[end if] fudge scented safe, which looks usual, close by.[if c_4 is open and there is something in the c_4] The fudge scented safe contains [a list of things in the c_4]. You can't wait to tell the folks at home about this![end if][if c_4 is open and the c_4 contains nothing] The fudge scented safe is empty! This is the worst thing that could possibly happen, ever![end if] You see a American locker.[if c_7 is open and there is something in the c_7] The American locker contains [a list of things in the c_7]. You idly wonder how they came up with the name TextWorld for this place. It's pretty fitting.[end if][if c_7 is open and the c_7 contains nothing] The American locker is empty! What a waste of a day![end if] You see a workbench. [if there is something on the s_0]You see [a list of things on the s_0] on the workbench.[end if][if there is nothing on the s_0]But the thing is empty.[end if]\n\nYou need an unguarded exit? You should try going west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "scullery", "noun": "scullery", "adj": null, "desc": "Well, here we are in the scullery.\n\n You scan the room for a locker, and you find a locker.[if c_2 is open and there is something in the c_2] The locker contains [a list of things in the c_2]. The light flickers for a second, but nothing else happens.[end if][if c_2 is open and the c_2 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You can see [if c_5 is locked]a locked[else if c_5 is open]an opened[otherwise]a closed[end if] American limited edition locker nearby.[if c_5 is open and there is something in the c_5] The American limited edition locker contains [a list of things in the c_5]. I mean, just wow! Isn't TextWorld just the best?[end if][if c_5 is open and the c_5 contains nothing] What a letdown! The American limited edition locker is empty![end if] You see a gleam over in a corner, where you can see a type Y chest.[if c_6 is open and there is something in the c_6] The type Y chest contains [a list of things in the c_6].[end if][if c_6 is open and the c_6 contains nothing] What a letdown! The type Y chest is empty![end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] portal leading south. You need an unblocked exit? You should try going east.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "pantry", "noun": "pantry", "adj": null, "desc": "You find yourself in a pantry. A normal one.\n\n\n\n There is [if d_5 is open]an open[otherwise]a closed[end if] door leading east. There is [if d_6 is open]an open[otherwise]a closed[end if] gate leading west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "bedchamber", "noun": "bedchamber", "adj": null, "desc": "You arrive in a bedchamber.\n\n You see a basket.[if c_8 is open and there is something in the c_8] The basket contains [a list of things in the c_8]. Hmmm... what else, what else?[end if][if c_8 is open and the c_8 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] hatch leading north. There is [if d_6 is open]an open[otherwise]a closed[end if] gate leading east.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "vault", "noun": "vault", "adj": null, "desc": "You find yourself in a vault. An usual one.\n\n You see a table. [if there is something on the s_1]You see [a list of things on the s_1] on the table.[end if][if there is nothing on the s_1]But the thing is empty, unfortunately. You swear loudly.[end if]\n\n There is [if d_4 is open]an open[otherwise]a closed[end if] gateway leading north. There is [if d_5 is open]an open[otherwise]a closed[end if] door leading west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "garage", "noun": "garage", "adj": null, "desc": "You've fallen into a typical room. Your mind races to think of what kind of room would be typical. And then it hits you. Of course. You're in the garage. I guess you better just go and list everything you see here.\n\n You can see [if c_9 is locked]a locked[else if c_9 is open]an opened[otherwise]a closed[end if] type O chest.[if c_9 is open and there is something in the c_9] The type O chest contains [a list of things in the c_9].[end if][if c_9 is open and the c_9 contains nothing] The type O chest is empty! What a waste of a day![end if]\n\nThere is an unblocked exit to the west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "laundry place", "noun": "laundry place", "adj": null, "desc": "You find yourself in a laundry place. A standard kind of place.\n\n You see [if c_10 is locked]a locked[else if c_10 is open]an opened[otherwise]a closed[end if] Canadian style box in the corner.[if c_10 is open and there is something in the c_10] The Canadian style box contains [a list of things in the c_10]. The light flickers for a second, but nothing else happens.[end if][if c_10 is open and the c_10 contains nothing] The Canadian style box is empty, what a horrible day![end if]\n\n There is [if d_3 is open]an open[otherwise]a closed[end if] stone gateway leading south. There is an exit to the east. Don't worry, it is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "washroom", "noun": "washroom", "adj": null, "desc": "Well, here we are in the washroom.\n\n\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] hatch leading south. There is [if d_1 is open]an open[otherwise]a closed[end if] passageway leading north.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "bar", "noun": "bar", "adj": null, "desc": "You're now in the bar.\n\n You can make out a suitcase.[if c_11 is open and there is something in the c_11] The suitcase contains [a list of things in the c_11].[end if][if c_11 is open and the c_11 contains nothing] The suitcase is empty! This is the worst thing that could possibly happen, ever![end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] portal leading north. There is [if d_1 is open]an open[otherwise]a closed[end if] passageway leading south.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "cookhouse", "noun": "cookhouse", "adj": null, "desc": "You find yourself in a cookhouse.\n\n [if c_12 is locked]A locked[else if c_12 is open]An open[otherwise]A closed[end if] box, which looks standard, is in the corner.[if c_12 is open and there is something in the c_12] The box contains [a list of things in the c_12].[end if][if c_12 is open and the c_12 contains nothing] The box is empty, what a horrible day![end if] Were you looking for a cabinet? Because look over there, it's a cabinet.[if c_13 is open and there is something in the c_13] The cabinet contains [a list of things in the c_13].[end if][if c_13 is open and the c_13 contains nothing] The cabinet is empty! This is the worst thing that could possibly happen, ever![end if]\n\n There is [if d_3 is open]an open[otherwise]a closed[end if] stone gateway leading north. There is [if d_4 is open]an open[otherwise]a closed[end if] gateway leading south.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["d_2", {"id": "d_2", "type": "d", "name": "hatch", "noun": "hatch", "adj": null, "desc": "The hatch looks durable. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["d_6", {"id": "d_6", "type": "d", "name": "gate", "noun": "gate", "adj": null, "desc": "it is what it is, a gate [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["d_1", {"id": "d_1", "type": "d", "name": "passageway", "noun": "passageway", "adj": null, "desc": "it's a solid passageway [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_0", {"id": "d_0", "type": "d", "name": "portal", "noun": "portal", "adj": null, "desc": "The portal looks imposing. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["d_5", {"id": "d_5", "type": "d", "name": "door", "noun": "door", "adj": null, "desc": "The door looks stuffy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["d_4", {"id": "d_4", "type": "d", "name": "gateway", "noun": "gateway", "adj": null, "desc": "it's a sturdy gateway [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["d_3", {"id": "d_3", "type": "d", "name": "stone gateway", "noun": "gateway", "adj": "stone", "desc": "it is what it is, a stone gateway [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "safe", "noun": "safe", "adj": null, "desc": "The safe looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "American limited edition chest", "noun": "American limited edition chest", "adj": null, "desc": "The American limited edition chest looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_10", {"id": "c_10", "type": "c", "name": "Canadian style box", "noun": "Canadian style box", "adj": null, "desc": "The Canadian style box looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_11", {"id": "c_11", "type": "c", "name": "suitcase", "noun": "suitcase", "adj": null, "desc": "The suitcase looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_12", {"id": "c_12", "type": "c", "name": "box", "noun": "box", "adj": null, "desc": "The box looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_13", {"id": "c_13", "type": "c", "name": "cabinet", "noun": "cabinet", "adj": null, "desc": "The cabinet looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "locker", "noun": "locker", "adj": null, "desc": "The locker looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "American style box", "noun": "American style box", "adj": null, "desc": "The American style box looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "fudge scented safe", "noun": "fudge scented safe", "adj": null, "desc": "The fudge scented safe looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "American limited edition locker", "noun": "American limited edition locker", "adj": null, "desc": "The American limited edition locker looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_6", {"id": "c_6", "type": "c", "name": "type Y chest", "noun": "type Y chest", "adj": null, "desc": "The type Y chest looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_7", {"id": "c_7", "type": "c", "name": "American locker", "noun": "American locker", "adj": null, "desc": "The American locker looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_8", {"id": "c_8", "type": "c", "name": "basket", "noun": "basket", "adj": null, "desc": "The basket looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_9", {"id": "c_9", "type": "c", "name": "type O chest", "noun": "type O chest", "adj": null, "desc": "The type O chest looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_10", {"id": "k_10", "type": "k", "name": "type O latchkey", "noun": "type O latchkey", "adj": null, "desc": "The type O latchkey is light.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_13", {"id": "k_13", "type": "k", "name": "passkey", "noun": "passkey", "adj": null, "desc": "The passkey is surprisingly heavy.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["k_7", {"id": "k_7", "type": "k", "name": "American latchkey", "noun": "American latchkey", "adj": null, "desc": "The metal of the American latchkey is polished.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_1", {"id": "o_1", "type": "o", "name": "paper towel", "noun": "paper towel", "adj": null, "desc": "The paper towel is dirty.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "workbench", "noun": "workbench", "adj": null, "desc": "The workbench is reliable.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "table", "noun": "table", "adj": null, "desc": "The table is stable.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "loaf of bread", "noun": "loaf of bread", "adj": null, "desc": "You couldn't pay me to eat that usual thing.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_0", {"id": "k_0", "type": "k", "name": "latchkey", "noun": "latchkey", "adj": null, "desc": "The metal of the latchkey is brushed.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_1", {"id": "k_1", "type": "k", "name": "American limited edition keycard", "noun": "American limited edition keycard", "adj": null, "desc": "The American limited edition keycard looks useful", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["k_12", {"id": "k_12", "type": "k", "name": "Canadian style keycard", "noun": "Canadian style keycard", "adj": null, "desc": "The Canadian style keycard is cold to the touch", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["k_2", {"id": "k_2", "type": "k", "name": "keycard", "noun": "keycard", "adj": null, "desc": "The keycard is light.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_3", {"id": "k_3", "type": "k", "name": "American style latchkey", "noun": "American style latchkey", "adj": null, "desc": "The American style latchkey is heavier than it looks.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_4", {"id": "k_4", "type": "k", "name": "fudge scented passkey", "noun": "fudge scented passkey", "adj": null, "desc": "The fudge scented passkey looks useful", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["k_5", {"id": "k_5", "type": "k", "name": "American limited edition key", "noun": "American limited edition key", "adj": null, "desc": "The American limited edition key is heavier than it looks.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["k_6", {"id": "k_6", "type": "k", "name": "type Y key", "noun": "type Y key", "adj": null, "desc": "The metal of the type Y key is antiqued.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "teapot", "noun": "teapot", "adj": null, "desc": "The teapot is brand new.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/jason/anaconda3/envs/llm-tp/lib/python3.10/site-packages/textworld/generator/data/text_grammars"}, "metadata": {"walkthrough": ["take American latchkey", "unlock American locker with American latchkey", "open American locker", "take type Y key from American locker", "go west", "unlock type Y chest with type Y key", "open type Y chest", "take American limited edition key from type Y chest", "unlock American limited edition locker with American limited edition key", "open American limited edition locker", "take fudge scented passkey from American limited edition locker", "go east", "unlock fudge scented safe with fudge scented passkey", "open fudge scented safe", "take American style latchkey from fudge scented safe", "unlock American style box with American style latchkey", "open American style box", "take keycard from American style box", "go west", "unlock locker with keycard", "open locker", "take American limited edition keycard from locker", "go east", "unlock American limited edition chest with American limited edition keycard", "open American limited edition chest", "take latchkey from American limited edition chest", "unlock safe with latchkey", "open safe", "take loaf of bread from safe", "eat loaf of bread"], "uuid": "tw-JecKINF6IYINFDIQFE-house-GP-OgOJFl9Jtba5I1Rb"}, "objective": "Hey, thanks for coming over to the TextWorld today, there is something I need you to do for me. First of all, you could, like, recover the American latchkey from the floor of the attic. Then, unlock the American locker. After that, open the American locker in the attic. Then, take the type Y key from the American locker in the attic. With the type Y key, make an effort to take a trip west. Then, unlock the type Y chest in the scullery. After unlocking the type Y chest, open the type Y chest. And then, take the American limited edition key from the type Y chest within the scullery. With the American limited edition key, make absolutely sure that the American limited edition locker inside the scullery is unlocked with the American limited edition key. Having unlocked the American limited edition locker, ensure that the American limited edition locker is open. After that, retrieve the fudge scented passkey from the American limited edition locker within the scullery. Then, move east. After that, make absolutely sure that the fudge scented safe is unlocked. After that, ensure that the fudge scented safe is open. And then, pick up the American style latchkey from the fudge scented safe. And then, check that the American style box is unlocked with the American style latchkey. After unlocking the American style box, make it so that the American style box inside the attic is wide open. And then, recover the keycard from the American style box. With the keycard, attempt to head west. Okay, and then, unlock the locker with the keycard. And then, make sure that the locker in the scullery is ajar. After that, pick up the American limited edition keycard from the locker. With the American limited edition keycard, make an attempt to go east. And then, look and see that the American limited edition chest in the attic is unlocked with the American limited edition keycard. And then, ensure that the American limited edition chest in the attic is open. Once you have pulled open the American limited edition chest, pick up the latchkey from the American limited edition chest. Then, insert the latchkey into the safe inside the attic's lock to unlock it. And then, make it so that the safe is open. After that, retrieve the loaf of bread from the safe within the attic. After that, eat the loaf of bread. Once that's all handled, you can stop!"}